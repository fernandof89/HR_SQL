--BEGINNING

-- FLOOR Return the largest integer value that is less than or equal to num / CEIL Return the smallest integer value that is greater than or equal to num
floor() / ceil()

-- MEDIAN formula
SELECT round(avg(ss.LAT_N),4)
FROM
        (
        SELECT s.LAT_N, @rownum:=@rownum+1 as `row_number`, @total_rows:=@rownum
        FROM STATION s, (SELECT @rownum:=0) r
        ORDER BY s.LAT_N
        ) as ss --builds a table with the ordered LAT_N and two additional columns, the last gives the total which is ging to be used to determine the 1/2 middle values
WHERE ss.row_number IN (FLOOR(@total_rows+1)/2, CEIL(@total_rows+2)/2);

--Easy use of Inner Join
SELECT SUM(CITY.POPULATION)
FROM CITY
INNER JOIN COUNTRY
ON CITY.CountryCode = COUNTRY.Code
WHERE COUNTRY.CONTINENT = 'Asia'

--Easy to use Join (Full, with no need to tag tables)
SELECT IF(GRADE < 8, NULL, NAME), GRADE, MARKS
FROM STUDENTS JOIN GRADES
WHERE MARKS BETWEEN MIN_MARK AND MAX_MARK
ORDER BY GRADE DESC, NAME

--Multiple Joins
SELECT h.hacker_id, h.name
FROM Hackers as h INNER JOIN Submissions as s
USING(hacker_id)
INNER JOIN Challenges as c
USING(challenge_id)
INNER JOIN Difficulty as d
USING(difficulty_level)
WHERE s.score = d.score
GROUP BY h.hacker_id, h.name
HAVING COUNT(h.hacker_id)>1
ORDER BY COUNT(h.hacker_id) DESC, h.hacker_id 

--Explanation of set and operators
User defined variables start with @ in MYSQL.
:= is an operator that does not require you to use the key word SET before it.
Basically @number := @number - 1 is saying decrease the @number user variable each time it's printed out. In pseudocode it would be number = number - 1.

--Article Stored Procedures: https://www.mysqltutorial.org/mysql-stored-procedure/mysql-repeat-loop/#:~:text=Code%20language%3A%20SQL%20%28Structured%20Query%20Language%29%20%28sql%29%20The,REPEAT%20is%20also%20known%20as%20a%20post-test%20loop.
--https://www.w3schools.com/sqL/func_mysql_repeat.asp
SELECT REPEAT("SQL Tutorial", 3);

--The INFORMATION_SCHEMA.TABLES view allows you to get information about all tables and views within a database.

--Joins and subquerues
SELECT w.id, wp.age, w.coins_needed, w.power
FROM Wands as w
INNER JOIN Wands_property as wp
USING(code)
WHERE wp.is_evil = 0 AND w.coins_needed = (SELECT Min(w1.coins_needed) 
                                            FROM Wands as w1
                                            INNER JOIN Wands_property as wp1
                                            USING(code)
                                            WHERE wp.age = wp1.age AND w.power = w1.power)
ORDER BY w.power DESC, wp.age DESC

--Interesting usage of Where
WHERE country Like '%a%'

--Nice JOIN solution for changing a variable like the Sum of something (still trying to understand why name and score doesn't need a prefix) -> because is unique on the table
SELECT h.hacker_id, name, sum(score) as total_score
FROM Hackers as h INNER JOIN
                        (SELECT hacker_id, max(score) as score
                         FROM Submissions
                         GROUP BY challenge_id, hacker_id
                        ) max_score
ON h.hacker_id = max_score.hacker_id
GROUP BY h.hacker_id, name
HAVING
    total_score != 0
ORDER BY total_score DESC, h.hacker_id

--Interesting use of WHERE NOT IN to Join Tables. Still don't understand why the are two tables at FROM without using joins. In this article it may be the answer to that: 
https://learnsql.com/blog/sql-join-tables-without-join/#:~:text=Yes%2C%20Tables%20Can%20Be%20Joined%20Without%20the%20JOIN,other%20method%20is%20to%20write%20two%20SELECT%20statements.
SELECT Start_Date, MIN(End_Date)
FROM 
    (SELECT Start_Date 
     FROM Projects 
     WHERE Start_Date NOT IN 
                            (SELECT End_Date 
                             FROM Projects)
    ) a,
    (SELECT End_Date 
     FROM Projects 
     WHERE End_Date NOT IN 
                           (SELECT Start_Date 
                            FROM Projects)
    ) b 
WHERE Start_Date < End_Date
GROUP BY Start_Date
ORDER BY DATEDIFF(MIN(End_Date), Start_Date) ASC, Start_Date ASC;

--Simple Joins. Remember that INNER JOIN and JOIN are similar.
SELECT S.Name
FROM Students S JOIN Friends F USING(ID) 
    JOIN Packages P1 USING(ID)
    JOIN Packages P2 ON F.Friend_ID = P2.ID
WHERE P2.Salary > P1.Salary
ORDER BY P2.Salary

--Compact and easy query to find symetric pairs by eliminating duplicates and the second clause I don't have it clear.
SELECT f1.X, f1.Y
FROM Functions f1 JOIN Functions f2
ON f1.X = f2.Y AND f1.Y = f2.X
GROUP BY f1.X, f1.Y
HAVING COUNT(f1.X)>1 OR f1.X < f1.Y
ORDER BY f1.X
