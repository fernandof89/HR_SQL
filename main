--BEGINNING

-- FLOOR Return the largest integer value that is less than or equal to num / CEIL Return the smallest integer value that is greater than or equal to num
floor() / ceil()

-- MEDIAN formula
SELECT round(avg(ss.LAT_N),4)
FROM
        (
        SELECT s.LAT_N, @rownum:=@rownum+1 as `row_number`, @total_rows:=@rownum
        FROM STATION s, (SELECT @rownum:=0) r
        ORDER BY s.LAT_N
        ) as ss --builds a table with the ordered LAT_N and two additional columns, the last gives the total which is ging to be used to determine the 1/2 middle values
WHERE ss.row_number IN (FLOOR(@total_rows+1)/2, CEIL(@total_rows+2)/2);

--Easy use of Inner Join
SELECT SUM(CITY.POPULATION)
FROM CITY
INNER JOIN COUNTRY
ON CITY.CountryCode = COUNTRY.Code
WHERE COUNTRY.CONTINENT = 'Asia'

--Easy to use Join (Full, with no need to tag tables)
SELECT IF(GRADE < 8, NULL, NAME), GRADE, MARKS
FROM STUDENTS JOIN GRADES
WHERE MARKS BETWEEN MIN_MARK AND MAX_MARK
ORDER BY GRADE DESC, NAME

--Multiple Joins
SELECT h.hacker_id, h.name
FROM Hackers as h INNER JOIN Submissions as s
USING(hacker_id)
INNER JOIN Challenges as c
USING(challenge_id)
INNER JOIN Difficulty as d
USING(difficulty_level)
WHERE s.score = d.score
GROUP BY h.hacker_id, h.name
HAVING COUNT(h.hacker_id)>1
ORDER BY COUNT(h.hacker_id) DESC, h.hacker_id 

